#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

/*
uniform sampler2D backgroundTexture;
uniform sampler2D topTexture;
uniform sampler2D leftTexture;
uniform sampler2D bottomTexture;
uniform sampler2D rightTexture;
*/
uniform sampler2D blendMap;
uniform sampled2D textureAtlas;

uniform vec3 lightColor;
uniform float ambient;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

uniform float textureSize;
uniform float numTextures;

const int MAPSIZE = 8;/*CHANGE WITH TERRAINSIZE*/
uniform float textureIndices[MAPSIZE*MAPSIZE]; 



void main(void){
	
	vec2 modCoords = mod(tiledCoords,1);
	
	
	float backGroundTextureAmount = 1-blendMapColor.a;
	float rightTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	
	vec2 pos = floor(pass_textureCoords*numTex) /*move to Geometry shader!!!!!!!*/
	
	vec4 blendMapColor = texture(blendMap, modCoords);//pass_textureCoords*textureSize);
	vec4 backgroundTextureColor = texture(textureAtlas, modCoords+getTex(textureIndices[pos.y*MAPSIZE+pos.x]) * backGroundTextureAmount;
	vec4 topTextureColor = texture(textureAtlas, modCoords+getTex(textureIndices[(pos.y+1)*MAPSIZE+pos.x])) * blendMapColor.r*blendMapColor.a;
	vec4 leftTextureColor = texture(textureAtlas, modCoords+getTex(textureIndices[pos.y*MAPSIZE+pos.x-1])) * blendMapColor.g*blendMapColor.a;
	vec4 bottomTextureColor = texture(textureAtlas, modCoords+getTex(textureIndices[(pos.y-1)*MAPSIZE+pos.x])) * blendMapColor.b*blendMapColor.a;
	vec4 rightTextureColor = texture(textureAtlas, modCoords+getTex(textureIndices[pos.y*MAPSIZE+pos.x+1])) * rightTextureAmount*blendMapColor.a;
	vec4 totalColor;
	
	totalColor = backgroundTextureColor + (topTextureColor + bottomTextureColor + leftTextureColor + rightTextureColor);
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1,ambient);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity*  lightColor;
	
	out_Color = vec4(diffuse,1.0)* totalColor + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(skyColor, 1.0),out_Color, visibility);
}


void getOffset(float texIndex){
	float tileSize = textureSize/numTextures;
	return vec2(floor(texIndex/numTextures)*tileSize,mod(texIndex,numTextures)*tileSize);	
}

